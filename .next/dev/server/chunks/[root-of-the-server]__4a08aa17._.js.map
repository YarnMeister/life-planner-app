{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/new-app-template/drizzle/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, uuid, boolean, index } from 'drizzle-orm/pg-core';\nimport { sql } from 'drizzle-orm';\n\n// Minimal placeholder schema for template consumers to extend\nexport const appExample = pgTable('app_example', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  name: text('name').notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n// Authentication tables\nexport const users = pgTable('users', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  email: text('email').notNull().unique(),\n  createdAt: timestamp('created_at').notNull().default(sql`now()`),\n  updatedAt: timestamp('updated_at').notNull().default(sql`now()`),\n}, (table) => ({\n  emailIdx: index('users_email_idx').on(table.email),\n}));\n\nexport const authCodes = pgTable('auth_codes', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  email: text('email').notNull(),\n  code: text('code').notNull(), // Stores HMAC-SHA256 hash, not plaintext\n  ipAddress: text('ip_address'), // For IP-based rate limiting\n  expiresAt: timestamp('expires_at').notNull(),\n  used: boolean('used').notNull().default(false),\n  createdAt: timestamp('created_at').notNull().default(sql`now()`),\n}, (table) => ({\n  // Composite indexes for efficient rate-limit queries\n  emailCreatedIdx: index('auth_codes_email_created_idx').on(table.email, table.createdAt),\n  ipCreatedIdx: index('auth_codes_ip_created_idx').on(table.ipAddress, table.createdAt),\n}));\n\n// Track failed authentication attempts for proper lockout\nexport const failedAuthAttempts = pgTable('failed_auth_attempts', {\n  id: uuid('id').primaryKey().default(sql`gen_random_uuid()`),\n  email: text('email').notNull(),\n  ipAddress: text('ip_address').notNull(),\n  attemptedAt: timestamp('attempted_at').notNull().default(sql`now()`),\n}, (table) => ({\n  emailAttemptedIdx: index('failed_attempts_email_attempted_idx').on(table.email, table.attemptedAt),\n  ipAttemptedIdx: index('failed_attempts_ip_attempted_idx').on(table.ipAddress, table.attemptedAt),\n}));\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAGO,MAAM,aAAa,IAAA,4LAAO,EAAC,eAAe;IAC/C,IAAI,IAAA,mMAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,IAAA,mMAAI,EAAC,QAAQ,OAAO;IAC1B,WAAW,IAAA,6MAAS,EAAC,cAAc,UAAU;AAC/C;AAGO,MAAM,QAAQ,IAAA,4LAAO,EAAC,SAAS;IACpC,IAAI,IAAA,mMAAI,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,+KAAG,CAAC,iBAAiB,CAAC;IAC1D,OAAO,IAAA,mMAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,WAAW,IAAA,6MAAS,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC,+KAAG,CAAC,KAAK,CAAC;IAC/D,WAAW,IAAA,6MAAS,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC,+KAAG,CAAC,KAAK,CAAC;AACjE,GAAG,CAAC,QAAU,CAAC;QACb,UAAU,IAAA,4LAAK,EAAC,mBAAmB,EAAE,CAAC,MAAM,KAAK;IACnD,CAAC;AAEM,MAAM,YAAY,IAAA,4LAAO,EAAC,cAAc;IAC7C,IAAI,IAAA,mMAAI,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,+KAAG,CAAC,iBAAiB,CAAC;IAC1D,OAAO,IAAA,mMAAI,EAAC,SAAS,OAAO;IAC5B,MAAM,IAAA,mMAAI,EAAC,QAAQ,OAAO;IAC1B,WAAW,IAAA,mMAAI,EAAC;IAChB,WAAW,IAAA,6MAAS,EAAC,cAAc,OAAO;IAC1C,MAAM,IAAA,yMAAO,EAAC,QAAQ,OAAO,GAAG,OAAO,CAAC;IACxC,WAAW,IAAA,6MAAS,EAAC,cAAc,OAAO,GAAG,OAAO,CAAC,+KAAG,CAAC,KAAK,CAAC;AACjE,GAAG,CAAC,QAAU,CAAC;QACb,qDAAqD;QACrD,iBAAiB,IAAA,4LAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,KAAK,EAAE,MAAM,SAAS;QACtF,cAAc,IAAA,4LAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,SAAS,EAAE,MAAM,SAAS;IACtF,CAAC;AAGM,MAAM,qBAAqB,IAAA,4LAAO,EAAC,wBAAwB;IAChE,IAAI,IAAA,mMAAI,EAAC,MAAM,UAAU,GAAG,OAAO,CAAC,+KAAG,CAAC,iBAAiB,CAAC;IAC1D,OAAO,IAAA,mMAAI,EAAC,SAAS,OAAO;IAC5B,WAAW,IAAA,mMAAI,EAAC,cAAc,OAAO;IACrC,aAAa,IAAA,6MAAS,EAAC,gBAAgB,OAAO,GAAG,OAAO,CAAC,+KAAG,CAAC,KAAK,CAAC;AACrE,GAAG,CAAC,QAAU,CAAC;QACb,mBAAmB,IAAA,4LAAK,EAAC,uCAAuC,EAAE,CAAC,MAAM,KAAK,EAAE,MAAM,WAAW;QACjG,gBAAgB,IAAA,4LAAK,EAAC,oCAAoC,EAAE,CAAC,MAAM,SAAS,EAAE,MAAM,WAAW;IACjG,CAAC","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/new-app-template/src/lib/env.ts"],"sourcesContent":["import { z } from 'zod';\n\n/**\n * Server-side environment variables schema\n * These variables should NEVER be exposed to the client\n */\nconst serverSchema = z.object({\n  // Database\n  DATABASE_URL: z.string().url().min(1, 'DATABASE_URL is required'),\n  \n  // JWT\n  JWT_SECRET: z.string().min(32, 'JWT_SECRET must be at least 32 characters'),\n  \n  // Email (Resend) - Optional in dev/test with bypass\n  RESEND_API_KEY: z.string().optional(),\n  FROM_EMAIL: z.string().email('FROM_EMAIL must be a valid email').default('noreply@example.com'),\n  \n  // Development/Test Bypass (NEVER use in production)\n  DEV_BYPASS_CODE: z.string().optional(),\n  DEV_TEST_EMAIL: z.string().email().optional(),\n  \n  // Auth configuration (optional with defaults)\n  AUTH_RATE_LIMIT_WINDOW_MS: z.string().default('300000'),\n  AUTH_RATE_LIMIT_MAX: z.string().default('3'),\n  AUTH_CODE_TTL_MINUTES: z.string().default('10'),\n  \n  // Node environment\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n  \n  // Vercel (optional)\n  VERCEL_ENV: z.enum(['production', 'preview', 'development']).optional(),\n  PROD_DATABASE_URL: z.string().url().optional(),\n  POSTGRES_URL: z.string().url().optional(),\n  VERCEL_POSTGRES_URL: z.string().url().optional(),\n}).refine((data) => {\n  // In production, RESEND_API_KEY is required\n  if (data.NODE_ENV === 'production' && !data.RESEND_API_KEY) {\n    return false;\n  }\n  // DEV_BYPASS_CODE should NEVER be used in production\n  if (data.NODE_ENV === 'production' && data.DEV_BYPASS_CODE) {\n    throw new Error('DEV_BYPASS_CODE must not be set in production!');\n  }\n  return true;\n}, {\n  message: 'RESEND_API_KEY is required in production',\n});\n\n/**\n * Client-side environment variables schema\n * These variables are prefixed with NEXT_PUBLIC_ and safe to expose\n */\nconst clientSchema = z.object({\n  // Add any NEXT_PUBLIC_ variables here as needed\n  // NEXT_PUBLIC_API_URL: z.string().url().optional(),\n});\n\n/**\n * Server environment variables\n * Only accessible on the server side\n */\nexport const serverEnv = serverSchema.parse({\n  DATABASE_URL: process.env.DATABASE_URL || process.env.PROD_DATABASE_URL || process.env.POSTGRES_URL || process.env.VERCEL_POSTGRES_URL,\n  JWT_SECRET: process.env.JWT_SECRET,\n  RESEND_API_KEY: process.env.RESEND_API_KEY,\n  FROM_EMAIL: process.env.FROM_EMAIL,\n  DEV_BYPASS_CODE: process.env.DEV_BYPASS_CODE,\n  DEV_TEST_EMAIL: process.env.DEV_TEST_EMAIL,\n  AUTH_RATE_LIMIT_WINDOW_MS: process.env.AUTH_RATE_LIMIT_WINDOW_MS,\n  AUTH_RATE_LIMIT_MAX: process.env.AUTH_RATE_LIMIT_MAX,\n  AUTH_CODE_TTL_MINUTES: process.env.AUTH_CODE_TTL_MINUTES,\n  NODE_ENV: process.env.NODE_ENV,\n  VERCEL_ENV: process.env.VERCEL_ENV,\n  PROD_DATABASE_URL: process.env.PROD_DATABASE_URL,\n  POSTGRES_URL: process.env.POSTGRES_URL,\n  VERCEL_POSTGRES_URL: process.env.VERCEL_POSTGRES_URL,\n});\n\n/**\n * Helper to check if dev bypass mode is enabled\n * Only works in development/test, never in production\n */\nexport function isDevBypassEnabled(): boolean {\n  return (\n    (serverEnv.NODE_ENV === 'development' || serverEnv.NODE_ENV === 'test') &&\n    !!serverEnv.DEV_BYPASS_CODE\n  );\n}\n\n/**\n * Get the dev bypass code if enabled\n */\nexport function getDevBypassCode(): string | null {\n  return isDevBypassEnabled() ? serverEnv.DEV_BYPASS_CODE! : null;\n}\n\n/**\n * Get the dev test email if set\n */\nexport function getDevTestEmail(): string | null {\n  return isDevBypassEnabled() && serverEnv.DEV_TEST_EMAIL \n    ? serverEnv.DEV_TEST_EMAIL \n    : null;\n}\n\n/**\n * Client environment variables\n * Safe to use in client components\n */\nexport const clientEnv = clientSchema.parse({\n  // Add client env vars here\n});\n\n// Type exports\nexport type ServerEnv = z.infer<typeof serverSchema>;\nexport type ClientEnv = z.infer<typeof clientSchema>;\n\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AAEA;;;CAGC,GACD,MAAM,eAAe,mMAAC,CAAC,MAAM,CAAC;IAC5B,WAAW;IACX,cAAc,mMAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG;IAEtC,MAAM;IACN,YAAY,mMAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;IAE/B,oDAAoD;IACpD,gBAAgB,mMAAC,CAAC,MAAM,GAAG,QAAQ;IACnC,YAAY,mMAAC,CAAC,MAAM,GAAG,KAAK,CAAC,oCAAoC,OAAO,CAAC;IAEzE,oDAAoD;IACpD,iBAAiB,mMAAC,CAAC,MAAM,GAAG,QAAQ;IACpC,gBAAgB,mMAAC,CAAC,MAAM,GAAG,KAAK,GAAG,QAAQ;IAE3C,8CAA8C;IAC9C,2BAA2B,mMAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAC9C,qBAAqB,mMAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IACxC,uBAAuB,mMAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAE1C,mBAAmB;IACnB,UAAU,mMAAC,CAAC,IAAI,CAAC;QAAC;QAAe;QAAc;KAAO,EAAE,OAAO,CAAC;IAEhE,oBAAoB;IACpB,YAAY,mMAAC,CAAC,IAAI,CAAC;QAAC;QAAc;QAAW;KAAc,EAAE,QAAQ;IACrE,mBAAmB,mMAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ;IAC5C,cAAc,mMAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ;IACvC,qBAAqB,mMAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ;AAChD,GAAG,MAAM,CAAC,CAAC;IACT,4CAA4C;IAC5C,IAAI,KAAK,QAAQ,KAAK,gBAAgB,CAAC,KAAK,cAAc,EAAE;QAC1D,OAAO;IACT;IACA,qDAAqD;IACrD,IAAI,KAAK,QAAQ,KAAK,gBAAgB,KAAK,eAAe,EAAE;QAC1D,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT,GAAG;IACD,SAAS;AACX;AAEA;;;CAGC,GACD,MAAM,eAAe,mMAAC,CAAC,MAAM,CAAC;AAG9B;AAMO,MAAM,YAAY,aAAa,KAAK,CAAC;IAC1C,cAAc,QAAQ,GAAG,CAAC,YAAY,IAAI,QAAQ,GAAG,CAAC,iBAAiB,IAAI,QAAQ,GAAG,CAAC,YAAY,IAAI,QAAQ,GAAG,CAAC,mBAAmB;IACtI,YAAY,QAAQ,GAAG,CAAC,UAAU;IAClC,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAC1C,YAAY,QAAQ,GAAG,CAAC,UAAU;IAClC,iBAAiB,QAAQ,GAAG,CAAC,eAAe;IAC5C,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAC1C,2BAA2B,QAAQ,GAAG,CAAC,yBAAyB;IAChE,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB;IACpD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;IACxD,QAAQ;IACR,YAAY,QAAQ,GAAG,CAAC,UAAU;IAClC,mBAAmB,QAAQ,GAAG,CAAC,iBAAiB;IAChD,cAAc,QAAQ,GAAG,CAAC,YAAY;IACtC,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB;AACtD;AAMO,SAAS;IACd,OACE,CAAC,UAAU,QAAQ,KAAK,iBAAiB,UAAU,QAAQ,KAAK,MAAM,KACtE,CAAC,CAAC,UAAU,eAAe;AAE/B;AAKO,SAAS;IACd,OAAO,uBAAuB,UAAU,eAAe,GAAI;AAC7D;AAKO,SAAS;IACd,OAAO,wBAAwB,UAAU,cAAc,GACnD,UAAU,cAAc,GACxB;AACN;AAMO,MAAM,YAAY,aAAa,KAAK,CAAC;AAE5C","debugId":null}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/new-app-template/src/lib/auth/db.server.ts"],"sourcesContent":["/**\n * Server-only database module for Next.js\n * This file must NEVER be imported in client components\n */\nimport 'server-only';\n\nimport { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { users, authCodes, failedAuthAttempts } from '../../../drizzle/schema';\nimport { serverEnv } from '../env';\n\n// Use validated env from centralized config\nconst DATABASE_URL = serverEnv.DATABASE_URL;\n\n// Create Neon serverless connection with WebSocket support for multi-statement SQL\nconst sql = neon(DATABASE_URL, {\n  // Neon serverless driver handles connection pooling automatically\n  fetchOptions: {\n    // Ensure proper timeout handling\n  },\n});\n\n/**\n * Database client instance\n * Exported as a singleton to prevent connection leaks in development\n */\nexport const db = drizzle(sql);\n\n/**\n * Export schema for convenience\n * This keeps the import surface clean for API routes\n */\nexport { users, authCodes, failedAuthAttempts };\n\n/**\n * Type exports for use in server components and API routes\n */\nexport type User = typeof users.$inferSelect;\nexport type AuthCode = typeof authCodes.$inferSelect;\nexport type FailedAuthAttempt = typeof failedAuthAttempts.$inferSelect;\n\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AACD;AAEA;AACA;AACA;AACA;;;;;;AAEA,4CAA4C;AAC5C,MAAM,eAAe,0JAAS,CAAC,YAAY;AAE3C,mFAAmF;AACnF,MAAM,MAAM,IAAA,0LAAI,EAAC,cAAc;IAC7B,kEAAkE;IAClE,cAAc;IAEd;AACF;AAMO,MAAM,KAAK,IAAA,+LAAO,EAAC","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/new-app-template/src/lib/auth/jwt.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'dev-secret-change-in-production';\n\nif (!process.env.JWT_SECRET && process.env.NODE_ENV === 'production') {\n  throw new Error('JWT_SECRET environment variable is required in production');\n}\n\nexport interface UserPayload {\n  userId: string;\n  email: string;\n}\n\nexport function signToken(payload: UserPayload): string {\n  return jwt.sign(payload, JWT_SECRET, {\n    expiresIn: '7d', // Token expires in 7 days\n    issuer: 'app-template',\n    audience: 'app-template-users'\n  });\n}\n\nexport function verifyToken(token: string): UserPayload | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET, {\n      issuer: 'app-template',\n      audience: 'app-template-users'\n    }) as UserPayload;\n\n    return decoded;\n  } catch (error) {\n    console.error('JWT verification failed:', error);\n    return null;\n  }\n}\n\n/**\n * Generate a cryptographically secure 6-digit numeric OTP code\n */\nexport function generateAuthCode(): string {\n  // Use crypto.randomInt for secure random generation (0-999,999)\n  const code = crypto.randomInt(0, 1_000_000);\n  // Pad with leading zeros to ensure 6 digits\n  return code.toString().padStart(6, '0');\n}\n\n/**\n * Hash an OTP code with email as salt for secure storage\n * Uses HMAC-SHA256 with JWT_SECRET as the key\n */\nexport function hashAuthCode(code: string, email: string): string {\n  const hmac = crypto.createHmac('sha256', JWT_SECRET);\n  hmac.update(`${code}:${email}`);\n  return hmac.digest('hex');\n}\n\n/**\n * Verify an OTP code against its hash\n */\nexport function verifyAuthCode(code: string, email: string, hash: string): boolean {\n  const computedHash = hashAuthCode(code, email);\n  return crypto.timingSafeEqual(\n    Buffer.from(computedHash),\n    Buffer.from(hash)\n  );\n}\n\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAE7C;;AASO,SAAS,UAAU,OAAoB;IAC5C,OAAO,4KAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QACnC,WAAW;QACX,QAAQ;QACR,UAAU;IACZ;AACF;AAEO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,MAAM,UAAU,4KAAG,CAAC,MAAM,CAAC,OAAO,YAAY;YAC5C,QAAQ;YACR,UAAU;QACZ;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;IACT;AACF;AAKO,SAAS;IACd,gEAAgE;IAChE,MAAM,OAAO,gHAAM,CAAC,SAAS,CAAC,GAAG;IACjC,4CAA4C;IAC5C,OAAO,KAAK,QAAQ,GAAG,QAAQ,CAAC,GAAG;AACrC;AAMO,SAAS,aAAa,IAAY,EAAE,KAAa;IACtD,MAAM,OAAO,gHAAM,CAAC,UAAU,CAAC,UAAU;IACzC,KAAK,MAAM,CAAC,GAAG,KAAK,CAAC,EAAE,OAAO;IAC9B,OAAO,KAAK,MAAM,CAAC;AACrB;AAKO,SAAS,eAAe,IAAY,EAAE,KAAa,EAAE,IAAY;IACtE,MAAM,eAAe,aAAa,MAAM;IACxC,OAAO,gHAAM,CAAC,eAAe,CAC3B,OAAO,IAAI,CAAC,eACZ,OAAO,IAAI,CAAC;AAEhB","debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["file:///Users/janerasmus/Documents/Projects/new-app-template/app/api/auth/me/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { eq } from 'drizzle-orm';\nimport { cookies } from 'next/headers';\nimport { db, users } from '@/lib/auth/db.server';\nimport { verifyToken } from '@/lib/auth/jwt';\n\nexport async function GET(req: NextRequest) {\n  try {\n    // Get token from cookies\n    const cookieStore = await cookies();\n    const token = cookieStore.get('auth-token')?.value;\n\n    if (!token) {\n      return NextResponse.json(\n        { error: 'Not authenticated' },\n        { status: 401 }\n      );\n    }\n\n    // Verify JWT token\n    const payload = verifyToken(token);\n    if (!payload) {\n      return NextResponse.json(\n        { error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n\n    // Get current user from database\n    const user = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n      })\n      .from(users)\n      .where(eq(users.id, payload.userId))\n      .limit(1);\n\n    if (user.length === 0) {\n      return NextResponse.json(\n        { error: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      user: user[0]\n    });\n\n  } catch (error) {\n    console.error('Get current user error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get user information' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,yBAAyB;QACzB,MAAM,cAAc,MAAM,IAAA,sKAAO;QACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,eAAe;QAE7C,IAAI,CAAC,OAAO;YACV,OAAO,0KAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,mBAAmB;QACnB,MAAM,UAAU,IAAA,oKAAW,EAAC;QAC5B,IAAI,CAAC,SAAS;YACZ,OAAO,0KAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgB,GACzB;gBAAE,QAAQ;YAAI;QAElB;QAEA,iCAAiC;QACjC,MAAM,OAAO,MAAM,oLAAE,CAClB,MAAM,CAAC;YACN,IAAI,sJAAK,CAAC,EAAE;YACZ,OAAO,sJAAK,CAAC,KAAK;YAClB,WAAW,sJAAK,CAAC,SAAS;YAC1B,WAAW,sJAAK,CAAC,SAAS;QAC5B,GACC,IAAI,CAAC,sJAAK,EACV,KAAK,CAAC,IAAA,oMAAE,EAAC,sJAAK,CAAC,EAAE,EAAE,QAAQ,MAAM,GACjC,KAAK,CAAC;QAET,IAAI,KAAK,MAAM,KAAK,GAAG;YACrB,OAAO,0KAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,0KAAY,CAAC,IAAI,CAAC;YACvB,MAAM,IAAI,CAAC,EAAE;QACf;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,0KAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}